from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = "7758438540:AAEB0jNcYvX6A7bNAf_qYqYxQCEaWv5Xko4"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üõçÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–¥–æ–∫"))
menu.add(KeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
menu.add(KeyboardButton("üåç –í—ã–±–æ—Ä —è–∑—ã–∫–∞"))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–∫–∏–¥–æ–∫
categories = ReplyKeyboardMarkup(resize_keyboard=True)
categories.add(KeyboardButton("ü•ó –ï–¥–∞"), KeyboardButton("üëï –û–¥–µ–∂–¥–∞"))
categories.add(KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç"), KeyboardButton("üîô –ù–∞–∑–∞–¥"))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
languages = ReplyKeyboardMarkup(resize_keyboard=True)
languages.add(KeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞"), KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton("üá¨üáß English"))
languages.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∫–∏–¥–∫–∞–º
navigation_buttons = InlineKeyboardMarkup()
navigation_buttons.add(InlineKeyboardButton("‚óÄÔ∏è", callback_data="prev"))
navigation_buttons.add(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="next"))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Å–∫–∏–¥–∫–∏!", reply_markup=menu)

# –ö–Ω–æ–ø–∫–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–¥–æ–∫"
@dp.message_handler(lambda message: message.text == "üõçÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–∏–¥–æ–∫")
async def show_categories(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu)

# –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def leave_feedback(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ —Å—é–¥–∞, –∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

# –ö–Ω–æ–ø–∫–∞ "–í—ã–±–æ—Ä —è–∑—ã–∫–∞"
@dp.message_handler(lambda message: message.text == "üåç –í—ã–±–æ—Ä —è–∑—ã–∫–∞")
async def choose_language(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=languages)

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
@dp.callback_query_handler(lambda call: call.data == "more_info")
async def show_discount_details(call: types.CallbackQuery):
    await call.message.answer("üîπ –°–∫–∏–¥–∫–∞ 50% –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã! –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 20 —Ñ–µ–≤—Ä–∞–ª—è.", reply_markup=navigation_buttons)

# –ö–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä—ë–¥" –∏ "–ù–∞–∑–∞–¥" –¥–ª—è —Å–∫–∏–¥–æ–∫
@dp.callback_query_handler(lambda call: call.data in ["prev", "next"])
async def navigate_discounts(call: types.CallbackQuery):
    if call.data == "prev":
        await call.message.answer("‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∫–∏–¥–∫–µ...")
    else:
        await call.message.answer("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–∫–∏–¥–∫–µ...")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
